use nom::bytes::complete::tag;
use nom::error::ParseError;
use nom::IResult;
use nom::{Compare, InputLength, InputTake};

#[derive(PartialEq, Eq, PartialOrd, Ord)]
pub enum TokenKind {
    Assign,
    Add,
    AddAssign,
    Subtract,
    SubtractAssign,
    Divide,
    DivideAssign,
    Multiply,
    MultiplyAssign,
    Remaining,
    RemainingAssign,
    Pipe,
    Comma,
    Reference,
    Dereference,
    Plus,
    Minus,
    Increment,
    Decrement,
    Pow,
    Navigation,
    SafeNavigation,
    NullCoalescing,
    Not,
    BitAnd,
    BitAndAssign,
    BitOr,
    BitOrAssign,
    BitXor,
    BitXorAssign,
    And,
    AndAssign,
    Or,
    OrAssign,
    Equals,
    GreaterThan,
    GreaterThanEquals,
    LessThan,
    LessThanEquals,
    SpaceShip,
    NamespaceNavigation,
    Let,
    Func,
}

impl TokenKind {
    pub fn token(&self) -> &'static str {
        match *self {
            TokenKind::Assign => "=",
            TokenKind::Add => "+",
            TokenKind::AddAssign => "+=",
            TokenKind::Subtract => "-",
            TokenKind::SubtractAssign => "-=",
            TokenKind::Divide => "/",
            TokenKind::DivideAssign => "/=",
            TokenKind::Multiply => "*",
            TokenKind::MultiplyAssign => "*=",
            TokenKind::Remaining => "%",
            TokenKind::RemainingAssign => "%=",
            TokenKind::Pipe => "|>",
            TokenKind::Comma => ",",
            TokenKind::Reference => "&",
            TokenKind::Dereference => "*",
            TokenKind::Plus => "+",
            TokenKind::Minus => "-",
            TokenKind::Increment => "++",
            TokenKind::Decrement => "--",
            TokenKind::Pow => "**",
            TokenKind::Navigation => ".",
            TokenKind::SafeNavigation => "?.",
            TokenKind::NullCoalescing => "??",
            TokenKind::Not => "!",
            TokenKind::BitAnd => "&",
            TokenKind::BitAndAssign => "&-",
            TokenKind::BitOr => "|",
            TokenKind::BitOrAssign => "|=",
            TokenKind::BitXor => "^",
            TokenKind::BitXorAssign => "^=",
            TokenKind::And => "&&",
            TokenKind::AndAssign => "&&=",
            TokenKind::Or => "||",
            TokenKind::OrAssign => "||=",
            TokenKind::Equals => "==",
            TokenKind::GreaterThan => ">",
            TokenKind::GreaterThanEquals => ">=",
            TokenKind::LessThan => "<",
            TokenKind::LessThanEquals => "<=",
            TokenKind::SpaceShip => "<=>",
            TokenKind::NamespaceNavigation => "::",
            TokenKind::Let => "let",
            TokenKind::Func => "fn",
        }
    }
}
